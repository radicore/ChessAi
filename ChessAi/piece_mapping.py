import numpy as np

# Piece matrix tables
test = [
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
]

# -- KEY INFORMATION --

# Works in +2 increment
# Pawns should develop first

pawns_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    20, 20, 20, 20, 20, 20, 20, 20,
    10, 10, 10, 10, 10, 10, 10, 10,
    5, 5, 5, 5, 5, 5, 5, 5,
    -5, -5, -5, -5, -5, -5, -5, -5,
    -8, -8, -8, -8, -8, -8, -8, -8,
    0, 0, 0, 0, 0, 0, 0, 0,
]

pawns_end_table = [
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
]

knights_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 4, 8, 8, 4, 0, 0,
    0, 0, 4, 8, 8, 4, 0, 0,
    0, 0, 6, 0, 0, 6, 0, 0,
    0, 0, 0, 6, 6, 0, 0, 0,
    -4, -10, -4, -4, -4, -4, -10, -4,
]

bishops_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 4, 6, 6, 4, 0, 0,
    0, 0, 6, 6, 6, 6, 0, 0,
    0, 2, 4, 4, 4, 4, 2, 0,
    0, 6, 2, 4, 4, 2, 6, 0,
    -4, -4, -8, -4, -4, -8, -4, -4,
]

rooks_table = [
    8, 8, 8, 10, 10, 8, 8, 8,
    16, 16, 16, 16, 16, 16, 16, 16,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 4, 4, 0, 0, 0,
]

rooks_end_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
]

queens_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 2, 4, 4, 2, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2, 0, 0, 0, 0,
]

queens_end_table = [
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 4, 4, 4, 4, 4, 4, 0,
    0, 4, 10, 10, 10, 10, 4, 0,
    0, 4, 10, 15, 15, 10, 4, 0,
    0, 4, 10, 15, 15, 10, 4, 0,
    0, 4, 10, 10, 10, 10, 4, 0,
    0, 4, 4, 4, 4, 4, 4, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
]

king_middle_table = [
    -14, -10, -12, -16, -16, -12, -10, -14,
    -14, -10, -12, -16, -16, -12, -10, -14,
    -14, -10, -16, -20, -20, -16, -10, -14,
    -14, -10, -16, -20, -20, -16, -10, -14,
    -12, -8, -12, -16, -16, -12, -8, -12,
    -10, -6, -8, -12, -12, -8, -6, -10,
    -8, -4, -6, -8, -8, -6, -4, -8,
    0, 8, 8, 0, 4, 0, 8, 0,
]

king_end_table = [
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, 8, 8, 8, 8, 8, 8, -8,
    -8, 8, 12, 12, 12, 12, 8, -8,
    -8, 8, 12, 14, 14, 12, 8, -8,
    -8, 8, 12, 14, 14, 12, 8, -8,
    -8, 8, 12, 12, 12, 12, 8, -8,
    -8, 8, 8, 8, 8, 8, 8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8,
]

# Reverse board for black is already implemented in the evaluation.py

pawns_table = np.array(pawns_table)
knights_table = np.array(knights_table)
bishops_table = np.array(bishops_table)
rooks_table = np.array(rooks_table)
queens_table = np.array(queens_table)
king_middle_table = np.array(king_middle_table)

pawns_end_table = np.array(pawns_end_table)
rooks_end_table = np.array(rooks_end_table)
queens_end_table = np.array(queens_end_table)
king_end_table = np.array(king_end_table)
